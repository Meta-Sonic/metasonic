project(mts-core VERSION 1.0.0 LANGUAGES CXX)

set(MTS_CORE_LIBRARY_NAME mts_core)

# Sources.
set(MTS_CORE_INCLUDE_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/include)
set(MTS_CORE_SOURCE_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/src)

file(GLOB_RECURSE MTS_CORE_HEADER_FILES "${MTS_CORE_INCLUDE_DIRECTORY}/*.h")
file(GLOB_RECURSE MTS_CORE_SOURCE_FILES "${MTS_CORE_SOURCE_DIRECTORY}/*.cpp")

source_group(TREE ${MTS_CORE_INCLUDE_DIRECTORY}/mts PREFIX include FILES ${MTS_CORE_HEADER_FILES})
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${MTS_CORE_SOURCE_FILES})

# Library.
add_library(${PROJECT_NAME} STATIC ${MTS_CORE_HEADER_FILES} ${MTS_CORE_SOURCE_FILES})

set_mts_compile_options(${PROJECT_NAME} PRIVATE)

target_include_directories(${PROJECT_NAME} PUBLIC
    ${MTS_CORE_INCLUDE_DIRECTORY}
)

set_target_properties(${PROJECT_NAME} PROPERTIES
    FOLDER "modules"
    XCODE_GENERATE_SCHEME NO
    ARCHIVE_OUTPUT_NAME ${MTS_CORE_LIBRARY_NAME}
    ARCHIVE_OUTPUT_DIRECTORY ${MTS_BUILD_OUTPUT_DIRECTORY}
)

add_library(mts::core ALIAS ${PROJECT_NAME})

# Add tests target.
if (MTS_BUILD_TESTS)
    add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/tests)
endif()
